/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Partitions_types.h"

#include <algorithm>

namespace palo {

int _kTPartitionTypeValues[] = {
  TPartitionType::UNPARTITIONED,
  TPartitionType::RANDOM,
  TPartitionType::HASH_PARTITIONED,
  TPartitionType::RANGE_PARTITIONED
};
const char* _kTPartitionTypeNames[] = {
  "UNPARTITIONED",
  "RANDOM",
  "HASH_PARTITIONED",
  "RANGE_PARTITIONED"
};
const std::map<int, const char*> _TPartitionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTPartitionTypeValues, _kTPartitionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTDistributionTypeValues[] = {
  TDistributionType::UNPARTITIONED,
  TDistributionType::RANDOM,
  TDistributionType::HASH_PARTITIONED
};
const char* _kTDistributionTypeNames[] = {
  "UNPARTITIONED",
  "RANDOM",
  "HASH_PARTITIONED"
};
const std::map<int, const char*> _TDistributionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDistributionTypeValues, _kTDistributionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* TPartitionKey::ascii_fingerprint = "A998E9FEC66BC6A846AD90EFAE4F1521";
const uint8_t TPartitionKey::binary_fingerprint[16] = {0xA9,0x98,0xE9,0xFE,0xC6,0x6B,0xC6,0xA8,0x46,0xAD,0x90,0xEF,0xAE,0x4F,0x15,0x21};

uint32_t TPartitionKey::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_sign = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->sign);
          isset_sign = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type = ( ::palo::TPrimitiveType::type)ecast0;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_sign)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TPartitionKey::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TPartitionKey");

  xfer += oprot->writeFieldBegin("sign", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->sign);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.key) {
    xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->key);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPartitionKey &a, TPartitionKey &b) {
  using ::std::swap;
  swap(a.sign, b.sign);
  swap(a.type, b.type);
  swap(a.key, b.key);
  swap(a.__isset, b.__isset);
}

const char* TPartitionRange::ascii_fingerprint = "700246BAC5AD111808294FD9C6A0ECE3";
const uint8_t TPartitionRange::binary_fingerprint[16] = {0x70,0x02,0x46,0xBA,0xC5,0xAD,0x11,0x18,0x08,0x29,0x4F,0xD9,0xC6,0xA0,0xEC,0xE3};

uint32_t TPartitionRange::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_start_key = false;
  bool isset_end_key = false;
  bool isset_include_start_key = false;
  bool isset_include_end_key = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->start_key.read(iprot);
          isset_start_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->end_key.read(iprot);
          isset_end_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->include_start_key);
          isset_include_start_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->include_end_key);
          isset_include_end_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_start_key)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_end_key)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_include_start_key)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_include_end_key)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TPartitionRange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TPartitionRange");

  xfer += oprot->writeFieldBegin("start_key", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->start_key.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("end_key", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->end_key.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("include_start_key", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->include_start_key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("include_end_key", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->include_end_key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPartitionRange &a, TPartitionRange &b) {
  using ::std::swap;
  swap(a.start_key, b.start_key);
  swap(a.end_key, b.end_key);
  swap(a.include_start_key, b.include_start_key);
  swap(a.include_end_key, b.include_end_key);
}

const char* TRangePartition::ascii_fingerprint = "C58DB820E64943D3E08F8F8B6BE566AB";
const uint8_t TRangePartition::binary_fingerprint[16] = {0xC5,0x8D,0xB8,0x20,0xE6,0x49,0x43,0xD3,0xE0,0x8F,0x8F,0x8B,0x6B,0xE5,0x66,0xAB};

uint32_t TRangePartition::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_partition_id = false;
  bool isset_range = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->partition_id);
          isset_partition_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->range.read(iprot);
          isset_range = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->distributed_exprs.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->distributed_exprs.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += this->distributed_exprs[_i5].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.distributed_exprs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->distribute_bucket);
          this->__isset.distribute_bucket = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_partition_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_range)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TRangePartition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TRangePartition");

  xfer += oprot->writeFieldBegin("partition_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->partition_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("range", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->range.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.distributed_exprs) {
    xfer += oprot->writeFieldBegin("distributed_exprs", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->distributed_exprs.size()));
      std::vector< ::palo::TExpr> ::const_iterator _iter6;
      for (_iter6 = this->distributed_exprs.begin(); _iter6 != this->distributed_exprs.end(); ++_iter6)
      {
        xfer += (*_iter6).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.distribute_bucket) {
    xfer += oprot->writeFieldBegin("distribute_bucket", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->distribute_bucket);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TRangePartition &a, TRangePartition &b) {
  using ::std::swap;
  swap(a.partition_id, b.partition_id);
  swap(a.range, b.range);
  swap(a.distributed_exprs, b.distributed_exprs);
  swap(a.distribute_bucket, b.distribute_bucket);
  swap(a.__isset, b.__isset);
}

const char* TDataPartition::ascii_fingerprint = "5E1D1692EF71F1CA608FB155498ABF8A";
const uint8_t TDataPartition::binary_fingerprint[16] = {0x5E,0x1D,0x16,0x92,0xEF,0x71,0xF1,0xCA,0x60,0x8F,0xB1,0x55,0x49,0x8A,0xBF,0x8A};

uint32_t TDataPartition::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->type = (TPartitionType::type)ecast7;
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partition_exprs.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            xfer += iprot->readListBegin(_etype11, _size8);
            this->partition_exprs.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += this->partition_exprs[_i12].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partition_exprs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partition_infos.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _etype16;
            xfer += iprot->readListBegin(_etype16, _size13);
            this->partition_infos.resize(_size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              xfer += this->partition_infos[_i17].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partition_infos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TDataPartition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TDataPartition");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.partition_exprs) {
    xfer += oprot->writeFieldBegin("partition_exprs", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partition_exprs.size()));
      std::vector< ::palo::TExpr> ::const_iterator _iter18;
      for (_iter18 = this->partition_exprs.begin(); _iter18 != this->partition_exprs.end(); ++_iter18)
      {
        xfer += (*_iter18).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.partition_infos) {
    xfer += oprot->writeFieldBegin("partition_infos", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partition_infos.size()));
      std::vector<TRangePartition> ::const_iterator _iter19;
      for (_iter19 = this->partition_infos.begin(); _iter19 != this->partition_infos.end(); ++_iter19)
      {
        xfer += (*_iter19).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDataPartition &a, TDataPartition &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.partition_exprs, b.partition_exprs);
  swap(a.partition_infos, b.partition_infos);
  swap(a.__isset, b.__isset);
}

} // namespace
