/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "DataSinks_types.h"

#include <algorithm>

namespace palo {

int _kTDataSinkTypeValues[] = {
  TDataSinkType::DATA_STREAM_SINK,
  TDataSinkType::RESULT_SINK,
  TDataSinkType::DATA_SPLIT_SINK,
  TDataSinkType::MYSQL_TABLE_SINK,
  TDataSinkType::EXPORT_SINK
};
const char* _kTDataSinkTypeNames[] = {
  "DATA_STREAM_SINK",
  "RESULT_SINK",
  "DATA_SPLIT_SINK",
  "MYSQL_TABLE_SINK",
  "EXPORT_SINK"
};
const std::map<int, const char*> _TDataSinkType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTDataSinkTypeValues, _kTDataSinkTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* TDataStreamSink::ascii_fingerprint = "5B8707DB6AC84FD9F324A040D93EBCB1";
const uint8_t TDataStreamSink::binary_fingerprint[16] = {0x5B,0x87,0x07,0xDB,0x6A,0xC8,0x4F,0xD9,0xF3,0x24,0xA0,0x40,0xD9,0x3E,0xBC,0xB1};

uint32_t TDataStreamSink::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dest_node_id = false;
  bool isset_output_partition = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dest_node_id);
          isset_dest_node_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->output_partition.read(iprot);
          isset_output_partition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ignore_not_found);
          this->__isset.ignore_not_found = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dest_node_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_output_partition)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TDataStreamSink::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TDataStreamSink");

  xfer += oprot->writeFieldBegin("dest_node_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->dest_node_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("output_partition", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->output_partition.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.ignore_not_found) {
    xfer += oprot->writeFieldBegin("ignore_not_found", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->ignore_not_found);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDataStreamSink &a, TDataStreamSink &b) {
  using ::std::swap;
  swap(a.dest_node_id, b.dest_node_id);
  swap(a.output_partition, b.output_partition);
  swap(a.ignore_not_found, b.ignore_not_found);
  swap(a.__isset, b.__isset);
}

const char* TResultSink::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t TResultSink::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t TResultSink::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TResultSink::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TResultSink");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TResultSink &a, TResultSink &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* TMysqlTableSink::ascii_fingerprint = "1F73C09E2A8372C1091006AFD2C6C8D9";
const uint8_t TMysqlTableSink::binary_fingerprint[16] = {0x1F,0x73,0xC0,0x9E,0x2A,0x83,0x72,0xC1,0x09,0x10,0x06,0xAF,0xD2,0xC6,0xC8,0xD9};

uint32_t TMysqlTableSink::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_host = false;
  bool isset_port = false;
  bool isset_user = false;
  bool isset_passwd = false;
  bool isset_db = false;
  bool isset_table = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->host);
          isset_host = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->port);
          isset_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user);
          isset_user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->passwd);
          isset_passwd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db);
          isset_db = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table);
          isset_table = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_host)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_user)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_passwd)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_db)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_table)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TMysqlTableSink::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TMysqlTableSink");

  xfer += oprot->writeFieldBegin("host", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->host);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->user);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passwd", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->passwd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->db);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->table);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TMysqlTableSink &a, TMysqlTableSink &b) {
  using ::std::swap;
  swap(a.host, b.host);
  swap(a.port, b.port);
  swap(a.user, b.user);
  swap(a.passwd, b.passwd);
  swap(a.db, b.db);
  swap(a.table, b.table);
}

const char* TRollupSchema::ascii_fingerprint = "AAEA3EC433BD1C59A756F393B76EAD4E";
const uint8_t TRollupSchema::binary_fingerprint[16] = {0xAA,0xEA,0x3E,0xC4,0x33,0xBD,0x1C,0x59,0xA7,0x56,0xF3,0x93,0xB7,0x6E,0xAD,0x4E};

uint32_t TRollupSchema::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_keys = false;
  bool isset_values = false;
  bool isset_value_ops = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->keys.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->keys.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->keys[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_keys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->values.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += this->values[_i9].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->value_ops.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->value_ops.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              int32_t ecast15;
              xfer += iprot->readI32(ecast15);
              this->value_ops[_i14] = ( ::palo::TAggregationType::type)ecast15;
            }
            xfer += iprot->readListEnd();
          }
          isset_value_ops = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->keys_type);
          this->__isset.keys_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_keys)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_values)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value_ops)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TRollupSchema::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TRollupSchema");

  xfer += oprot->writeFieldBegin("keys", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->keys.size()));
    std::vector< ::palo::TExpr> ::const_iterator _iter16;
    for (_iter16 = this->keys.begin(); _iter16 != this->keys.end(); ++_iter16)
    {
      xfer += (*_iter16).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->values.size()));
    std::vector< ::palo::TExpr> ::const_iterator _iter17;
    for (_iter17 = this->values.begin(); _iter17 != this->values.end(); ++_iter17)
    {
      xfer += (*_iter17).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value_ops", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->value_ops.size()));
    std::vector< ::palo::TAggregationType::type> ::const_iterator _iter18;
    for (_iter18 = this->value_ops.begin(); _iter18 != this->value_ops.end(); ++_iter18)
    {
      xfer += oprot->writeI32((int32_t)(*_iter18));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.keys_type) {
    xfer += oprot->writeFieldBegin("keys_type", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->keys_type);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TRollupSchema &a, TRollupSchema &b) {
  using ::std::swap;
  swap(a.keys, b.keys);
  swap(a.values, b.values);
  swap(a.value_ops, b.value_ops);
  swap(a.keys_type, b.keys_type);
  swap(a.__isset, b.__isset);
}

const char* TDataSplitSink::ascii_fingerprint = "1955B8EE8781EE3AC03E66E769CE11D1";
const uint8_t TDataSplitSink::binary_fingerprint[16] = {0x19,0x55,0xB8,0xEE,0x87,0x81,0xEE,0x3A,0xC0,0x3E,0x66,0xE7,0x69,0xCE,0x11,0xD1};

uint32_t TDataSplitSink::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_partition_exprs = false;
  bool isset_partition_infos = false;
  bool isset_rollup_schemas = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partition_exprs.clear();
            uint32_t _size19;
            ::apache::thrift::protocol::TType _etype22;
            xfer += iprot->readListBegin(_etype22, _size19);
            this->partition_exprs.resize(_size19);
            uint32_t _i23;
            for (_i23 = 0; _i23 < _size19; ++_i23)
            {
              xfer += this->partition_exprs[_i23].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_partition_exprs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partition_infos.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            xfer += iprot->readListBegin(_etype27, _size24);
            this->partition_infos.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += this->partition_infos[_i28].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_partition_infos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->rollup_schemas.clear();
            uint32_t _size29;
            ::apache::thrift::protocol::TType _ktype30;
            ::apache::thrift::protocol::TType _vtype31;
            xfer += iprot->readMapBegin(_ktype30, _vtype31, _size29);
            uint32_t _i33;
            for (_i33 = 0; _i33 < _size29; ++_i33)
            {
              std::string _key34;
              xfer += iprot->readString(_key34);
              TRollupSchema& _val35 = this->rollup_schemas[_key34];
              xfer += _val35.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_rollup_schemas = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_partition_exprs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_partition_infos)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rollup_schemas)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TDataSplitSink::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TDataSplitSink");

  xfer += oprot->writeFieldBegin("partition_exprs", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partition_exprs.size()));
    std::vector< ::palo::TExpr> ::const_iterator _iter36;
    for (_iter36 = this->partition_exprs.begin(); _iter36 != this->partition_exprs.end(); ++_iter36)
    {
      xfer += (*_iter36).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partition_infos", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partition_infos.size()));
    std::vector< ::palo::TRangePartition> ::const_iterator _iter37;
    for (_iter37 = this->partition_infos.begin(); _iter37 != this->partition_infos.end(); ++_iter37)
    {
      xfer += (*_iter37).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rollup_schemas", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->rollup_schemas.size()));
    std::map<std::string, TRollupSchema> ::const_iterator _iter38;
    for (_iter38 = this->rollup_schemas.begin(); _iter38 != this->rollup_schemas.end(); ++_iter38)
    {
      xfer += oprot->writeString(_iter38->first);
      xfer += _iter38->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDataSplitSink &a, TDataSplitSink &b) {
  using ::std::swap;
  swap(a.partition_exprs, b.partition_exprs);
  swap(a.partition_infos, b.partition_infos);
  swap(a.rollup_schemas, b.rollup_schemas);
}

const char* TExportSink::ascii_fingerprint = "A0199DE016531A8B386F7C3A090560B0";
const uint8_t TExportSink::binary_fingerprint[16] = {0xA0,0x19,0x9D,0xE0,0x16,0x53,0x1A,0x8B,0x38,0x6F,0x7C,0x3A,0x09,0x05,0x60,0xB0};

uint32_t TExportSink::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_file_type = false;
  bool isset_export_path = false;
  bool isset_column_separator = false;
  bool isset_line_delimiter = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast39;
          xfer += iprot->readI32(ecast39);
          this->file_type = ( ::palo::TFileType::type)ecast39;
          isset_file_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->export_path);
          isset_export_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->column_separator);
          isset_column_separator = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->line_delimiter);
          isset_line_delimiter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->broker_addresses.clear();
            uint32_t _size40;
            ::apache::thrift::protocol::TType _etype43;
            xfer += iprot->readListBegin(_etype43, _size40);
            this->broker_addresses.resize(_size40);
            uint32_t _i44;
            for (_i44 = 0; _i44 < _size40; ++_i44)
            {
              xfer += this->broker_addresses[_i44].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.broker_addresses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->properties.clear();
            uint32_t _size45;
            ::apache::thrift::protocol::TType _ktype46;
            ::apache::thrift::protocol::TType _vtype47;
            xfer += iprot->readMapBegin(_ktype46, _vtype47, _size45);
            uint32_t _i49;
            for (_i49 = 0; _i49 < _size45; ++_i49)
            {
              std::string _key50;
              xfer += iprot->readString(_key50);
              std::string& _val51 = this->properties[_key50];
              xfer += iprot->readString(_val51);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_file_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_export_path)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_column_separator)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_line_delimiter)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TExportSink::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TExportSink");

  xfer += oprot->writeFieldBegin("file_type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->file_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("export_path", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->export_path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_separator", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->column_separator);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("line_delimiter", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->line_delimiter);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.broker_addresses) {
    xfer += oprot->writeFieldBegin("broker_addresses", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->broker_addresses.size()));
      std::vector< ::palo::TNetworkAddress> ::const_iterator _iter52;
      for (_iter52 = this->broker_addresses.begin(); _iter52 != this->broker_addresses.end(); ++_iter52)
      {
        xfer += (*_iter52).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.properties) {
    xfer += oprot->writeFieldBegin("properties", ::apache::thrift::protocol::T_MAP, 6);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->properties.size()));
      std::map<std::string, std::string> ::const_iterator _iter53;
      for (_iter53 = this->properties.begin(); _iter53 != this->properties.end(); ++_iter53)
      {
        xfer += oprot->writeString(_iter53->first);
        xfer += oprot->writeString(_iter53->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TExportSink &a, TExportSink &b) {
  using ::std::swap;
  swap(a.file_type, b.file_type);
  swap(a.export_path, b.export_path);
  swap(a.column_separator, b.column_separator);
  swap(a.line_delimiter, b.line_delimiter);
  swap(a.broker_addresses, b.broker_addresses);
  swap(a.properties, b.properties);
  swap(a.__isset, b.__isset);
}

const char* TDataSink::ascii_fingerprint = "2666706426FC9B169583180854CF69DA";
const uint8_t TDataSink::binary_fingerprint[16] = {0x26,0x66,0x70,0x64,0x26,0xFC,0x9B,0x16,0x95,0x83,0x18,0x08,0x54,0xCF,0x69,0xDA};

uint32_t TDataSink::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast54;
          xfer += iprot->readI32(ecast54);
          this->type = (TDataSinkType::type)ecast54;
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->stream_sink.read(iprot);
          this->__isset.stream_sink = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->result_sink.read(iprot);
          this->__isset.result_sink = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->split_sink.read(iprot);
          this->__isset.split_sink = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mysql_table_sink.read(iprot);
          this->__isset.mysql_table_sink = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->export_sink.read(iprot);
          this->__isset.export_sink = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TDataSink::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TDataSink");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.stream_sink) {
    xfer += oprot->writeFieldBegin("stream_sink", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->stream_sink.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.result_sink) {
    xfer += oprot->writeFieldBegin("result_sink", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->result_sink.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.split_sink) {
    xfer += oprot->writeFieldBegin("split_sink", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->split_sink.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mysql_table_sink) {
    xfer += oprot->writeFieldBegin("mysql_table_sink", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->mysql_table_sink.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.export_sink) {
    xfer += oprot->writeFieldBegin("export_sink", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->export_sink.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDataSink &a, TDataSink &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.stream_sink, b.stream_sink);
  swap(a.result_sink, b.result_sink);
  swap(a.split_sink, b.split_sink);
  swap(a.mysql_table_sink, b.mysql_table_sink);
  swap(a.export_sink, b.export_sink);
  swap(a.__isset, b.__isset);
}

} // namespace
