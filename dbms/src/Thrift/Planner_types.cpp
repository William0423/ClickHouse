/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Planner_types.h"

#include <algorithm>

namespace palo {

const char* TPlanFragment::ascii_fingerprint = "A0C07048D48A95598D1A8976894FAB34";
const uint8_t TPlanFragment::binary_fingerprint[16] = {0xA0,0xC0,0x70,0x48,0xD4,0x8A,0x95,0x59,0x8D,0x1A,0x89,0x76,0x89,0x4F,0xAB,0x34};

uint32_t TPlanFragment::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_partition = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->plan.read(iprot);
          this->__isset.plan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->output_exprs.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->output_exprs.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->output_exprs[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.output_exprs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->output_sink.read(iprot);
          this->__isset.output_sink = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->partition.read(iprot);
          isset_partition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_partition)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TPlanFragment::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TPlanFragment");

  if (this->__isset.plan) {
    xfer += oprot->writeFieldBegin("plan", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->plan.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.output_exprs) {
    xfer += oprot->writeFieldBegin("output_exprs", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->output_exprs.size()));
      std::vector< ::palo::TExpr> ::const_iterator _iter5;
      for (_iter5 = this->output_exprs.begin(); _iter5 != this->output_exprs.end(); ++_iter5)
      {
        xfer += (*_iter5).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.output_sink) {
    xfer += oprot->writeFieldBegin("output_sink", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->output_sink.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("partition", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->partition.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPlanFragment &a, TPlanFragment &b) {
  using ::std::swap;
  swap(a.plan, b.plan);
  swap(a.output_exprs, b.output_exprs);
  swap(a.output_sink, b.output_sink);
  swap(a.partition, b.partition);
  swap(a.__isset, b.__isset);
}

const char* TScanRangeLocation::ascii_fingerprint = "93D9FEDEBFFC7D3F939AAAC1BED16FA1";
const uint8_t TScanRangeLocation::binary_fingerprint[16] = {0x93,0xD9,0xFE,0xDE,0xBF,0xFC,0x7D,0x3F,0x93,0x9A,0xAA,0xC1,0xBE,0xD1,0x6F,0xA1};

uint32_t TScanRangeLocation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_server = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->server.read(iprot);
          isset_server = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->volume_id);
          this->__isset.volume_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->backend_id);
          this->__isset.backend_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_server)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TScanRangeLocation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TScanRangeLocation");

  xfer += oprot->writeFieldBegin("server", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->server.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.volume_id) {
    xfer += oprot->writeFieldBegin("volume_id", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->volume_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.backend_id) {
    xfer += oprot->writeFieldBegin("backend_id", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->backend_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TScanRangeLocation &a, TScanRangeLocation &b) {
  using ::std::swap;
  swap(a.server, b.server);
  swap(a.volume_id, b.volume_id);
  swap(a.backend_id, b.backend_id);
  swap(a.__isset, b.__isset);
}

const char* TScanRangeLocations::ascii_fingerprint = "F87F75BEF7D287E4A74319C93DABC9F2";
const uint8_t TScanRangeLocations::binary_fingerprint[16] = {0xF8,0x7F,0x75,0xBE,0xF7,0xD2,0x87,0xE4,0xA7,0x43,0x19,0xC9,0x3D,0xAB,0xC9,0xF2};

uint32_t TScanRangeLocations::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_scan_range = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->scan_range.read(iprot);
          isset_scan_range = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->locations.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->locations.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->locations[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.locations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_scan_range)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TScanRangeLocations::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TScanRangeLocations");

  xfer += oprot->writeFieldBegin("scan_range", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->scan_range.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locations", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->locations.size()));
    std::vector<TScanRangeLocation> ::const_iterator _iter11;
    for (_iter11 = this->locations.begin(); _iter11 != this->locations.end(); ++_iter11)
    {
      xfer += (*_iter11).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TScanRangeLocations &a, TScanRangeLocations &b) {
  using ::std::swap;
  swap(a.scan_range, b.scan_range);
  swap(a.locations, b.locations);
  swap(a.__isset, b.__isset);
}

} // namespace
