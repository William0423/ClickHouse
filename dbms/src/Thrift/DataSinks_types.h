/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DataSinks_TYPES_H
#define DataSinks_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Exprs_types.h"
#include "Types_types.h"
#include "Descriptors_types.h"
#include "Partitions_types.h"


namespace palo {

struct TDataSinkType {
  enum type {
    DATA_STREAM_SINK = 0,
    RESULT_SINK = 1,
    DATA_SPLIT_SINK = 2,
    MYSQL_TABLE_SINK = 3,
    EXPORT_SINK = 4
  };
};

extern const std::map<int, const char*> _TDataSinkType_VALUES_TO_NAMES;

typedef struct _TDataStreamSink__isset {
  _TDataStreamSink__isset() : ignore_not_found(false) {}
  bool ignore_not_found;
} _TDataStreamSink__isset;

class TDataStreamSink {
 public:

  static const char* ascii_fingerprint; // = "5B8707DB6AC84FD9F324A040D93EBCB1";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0x87,0x07,0xDB,0x6A,0xC8,0x4F,0xD9,0xF3,0x24,0xA0,0x40,0xD9,0x3E,0xBC,0xB1};

  TDataStreamSink() : dest_node_id(0), ignore_not_found(0) {
  }

  virtual ~TDataStreamSink() throw() {}

   ::palo::TPlanNodeId dest_node_id;
   ::palo::TDataPartition output_partition;
  bool ignore_not_found;

  _TDataStreamSink__isset __isset;

  void __set_dest_node_id(const  ::palo::TPlanNodeId val) {
    dest_node_id = val;
  }

  void __set_output_partition(const  ::palo::TDataPartition& val) {
    output_partition = val;
  }

  void __set_ignore_not_found(const bool val) {
    ignore_not_found = val;
    __isset.ignore_not_found = true;
  }

  bool operator == (const TDataStreamSink & rhs) const
  {
    if (!(dest_node_id == rhs.dest_node_id))
      return false;
    if (!(output_partition == rhs.output_partition))
      return false;
    if (__isset.ignore_not_found != rhs.__isset.ignore_not_found)
      return false;
    else if (__isset.ignore_not_found && !(ignore_not_found == rhs.ignore_not_found))
      return false;
    return true;
  }
  bool operator != (const TDataStreamSink &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDataStreamSink & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TDataStreamSink &a, TDataStreamSink &b);


class TResultSink {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  TResultSink() {
  }

  virtual ~TResultSink() throw() {}


  bool operator == (const TResultSink & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TResultSink &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResultSink & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TResultSink &a, TResultSink &b);


class TMysqlTableSink {
 public:

  static const char* ascii_fingerprint; // = "1F73C09E2A8372C1091006AFD2C6C8D9";
  static const uint8_t binary_fingerprint[16]; // = {0x1F,0x73,0xC0,0x9E,0x2A,0x83,0x72,0xC1,0x09,0x10,0x06,0xAF,0xD2,0xC6,0xC8,0xD9};

  TMysqlTableSink() : host(), port(0), user(), passwd(), db(), table() {
  }

  virtual ~TMysqlTableSink() throw() {}

  std::string host;
  int32_t port;
  std::string user;
  std::string passwd;
  std::string db;
  std::string table;

  void __set_host(const std::string& val) {
    host = val;
  }

  void __set_port(const int32_t val) {
    port = val;
  }

  void __set_user(const std::string& val) {
    user = val;
  }

  void __set_passwd(const std::string& val) {
    passwd = val;
  }

  void __set_db(const std::string& val) {
    db = val;
  }

  void __set_table(const std::string& val) {
    table = val;
  }

  bool operator == (const TMysqlTableSink & rhs) const
  {
    if (!(host == rhs.host))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(user == rhs.user))
      return false;
    if (!(passwd == rhs.passwd))
      return false;
    if (!(db == rhs.db))
      return false;
    if (!(table == rhs.table))
      return false;
    return true;
  }
  bool operator != (const TMysqlTableSink &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMysqlTableSink & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TMysqlTableSink &a, TMysqlTableSink &b);

typedef struct _TRollupSchema__isset {
  _TRollupSchema__isset() : keys_type(false) {}
  bool keys_type;
} _TRollupSchema__isset;

class TRollupSchema {
 public:

  static const char* ascii_fingerprint; // = "AAEA3EC433BD1C59A756F393B76EAD4E";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0xEA,0x3E,0xC4,0x33,0xBD,0x1C,0x59,0xA7,0x56,0xF3,0x93,0xB7,0x6E,0xAD,0x4E};

  TRollupSchema() : keys_type() {
  }

  virtual ~TRollupSchema() throw() {}

  std::vector< ::palo::TExpr>  keys;
  std::vector< ::palo::TExpr>  values;
  std::vector< ::palo::TAggregationType::type>  value_ops;
  std::string keys_type;

  _TRollupSchema__isset __isset;

  void __set_keys(const std::vector< ::palo::TExpr> & val) {
    keys = val;
  }

  void __set_values(const std::vector< ::palo::TExpr> & val) {
    values = val;
  }

  void __set_value_ops(const std::vector< ::palo::TAggregationType::type> & val) {
    value_ops = val;
  }

  void __set_keys_type(const std::string& val) {
    keys_type = val;
    __isset.keys_type = true;
  }

  bool operator == (const TRollupSchema & rhs) const
  {
    if (!(keys == rhs.keys))
      return false;
    if (!(values == rhs.values))
      return false;
    if (!(value_ops == rhs.value_ops))
      return false;
    if (__isset.keys_type != rhs.__isset.keys_type)
      return false;
    else if (__isset.keys_type && !(keys_type == rhs.keys_type))
      return false;
    return true;
  }
  bool operator != (const TRollupSchema &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRollupSchema & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TRollupSchema &a, TRollupSchema &b);


class TDataSplitSink {
 public:

  static const char* ascii_fingerprint; // = "1955B8EE8781EE3AC03E66E769CE11D1";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0x55,0xB8,0xEE,0x87,0x81,0xEE,0x3A,0xC0,0x3E,0x66,0xE7,0x69,0xCE,0x11,0xD1};

  TDataSplitSink() {
  }

  virtual ~TDataSplitSink() throw() {}

  std::vector< ::palo::TExpr>  partition_exprs;
  std::vector< ::palo::TRangePartition>  partition_infos;
  std::map<std::string, TRollupSchema>  rollup_schemas;

  void __set_partition_exprs(const std::vector< ::palo::TExpr> & val) {
    partition_exprs = val;
  }

  void __set_partition_infos(const std::vector< ::palo::TRangePartition> & val) {
    partition_infos = val;
  }

  void __set_rollup_schemas(const std::map<std::string, TRollupSchema> & val) {
    rollup_schemas = val;
  }

  bool operator == (const TDataSplitSink & rhs) const
  {
    if (!(partition_exprs == rhs.partition_exprs))
      return false;
    if (!(partition_infos == rhs.partition_infos))
      return false;
    if (!(rollup_schemas == rhs.rollup_schemas))
      return false;
    return true;
  }
  bool operator != (const TDataSplitSink &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDataSplitSink & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TDataSplitSink &a, TDataSplitSink &b);

typedef struct _TExportSink__isset {
  _TExportSink__isset() : broker_addresses(false), properties(false) {}
  bool broker_addresses;
  bool properties;
} _TExportSink__isset;

class TExportSink {
 public:

  static const char* ascii_fingerprint; // = "A0199DE016531A8B386F7C3A090560B0";
  static const uint8_t binary_fingerprint[16]; // = {0xA0,0x19,0x9D,0xE0,0x16,0x53,0x1A,0x8B,0x38,0x6F,0x7C,0x3A,0x09,0x05,0x60,0xB0};

  TExportSink() : file_type(( ::palo::TFileType::type)0), export_path(), column_separator(), line_delimiter() {
  }

  virtual ~TExportSink() throw() {}

   ::palo::TFileType::type file_type;
  std::string export_path;
  std::string column_separator;
  std::string line_delimiter;
  std::vector< ::palo::TNetworkAddress>  broker_addresses;
  std::map<std::string, std::string>  properties;

  _TExportSink__isset __isset;

  void __set_file_type(const  ::palo::TFileType::type val) {
    file_type = val;
  }

  void __set_export_path(const std::string& val) {
    export_path = val;
  }

  void __set_column_separator(const std::string& val) {
    column_separator = val;
  }

  void __set_line_delimiter(const std::string& val) {
    line_delimiter = val;
  }

  void __set_broker_addresses(const std::vector< ::palo::TNetworkAddress> & val) {
    broker_addresses = val;
    __isset.broker_addresses = true;
  }

  void __set_properties(const std::map<std::string, std::string> & val) {
    properties = val;
    __isset.properties = true;
  }

  bool operator == (const TExportSink & rhs) const
  {
    if (!(file_type == rhs.file_type))
      return false;
    if (!(export_path == rhs.export_path))
      return false;
    if (!(column_separator == rhs.column_separator))
      return false;
    if (!(line_delimiter == rhs.line_delimiter))
      return false;
    if (__isset.broker_addresses != rhs.__isset.broker_addresses)
      return false;
    else if (__isset.broker_addresses && !(broker_addresses == rhs.broker_addresses))
      return false;
    if (__isset.properties != rhs.__isset.properties)
      return false;
    else if (__isset.properties && !(properties == rhs.properties))
      return false;
    return true;
  }
  bool operator != (const TExportSink &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TExportSink & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TExportSink &a, TExportSink &b);

typedef struct _TDataSink__isset {
  _TDataSink__isset() : stream_sink(false), result_sink(false), split_sink(false), mysql_table_sink(false), export_sink(false) {}
  bool stream_sink;
  bool result_sink;
  bool split_sink;
  bool mysql_table_sink;
  bool export_sink;
} _TDataSink__isset;

class TDataSink {
 public:

  static const char* ascii_fingerprint; // = "2666706426FC9B169583180854CF69DA";
  static const uint8_t binary_fingerprint[16]; // = {0x26,0x66,0x70,0x64,0x26,0xFC,0x9B,0x16,0x95,0x83,0x18,0x08,0x54,0xCF,0x69,0xDA};

  TDataSink() : type((TDataSinkType::type)0) {
  }

  virtual ~TDataSink() throw() {}

  TDataSinkType::type type;
  TDataStreamSink stream_sink;
  TResultSink result_sink;
  TDataSplitSink split_sink;
  TMysqlTableSink mysql_table_sink;
  TExportSink export_sink;

  _TDataSink__isset __isset;

  void __set_type(const TDataSinkType::type val) {
    type = val;
  }

  void __set_stream_sink(const TDataStreamSink& val) {
    stream_sink = val;
    __isset.stream_sink = true;
  }

  void __set_result_sink(const TResultSink& val) {
    result_sink = val;
    __isset.result_sink = true;
  }

  void __set_split_sink(const TDataSplitSink& val) {
    split_sink = val;
    __isset.split_sink = true;
  }

  void __set_mysql_table_sink(const TMysqlTableSink& val) {
    mysql_table_sink = val;
    __isset.mysql_table_sink = true;
  }

  void __set_export_sink(const TExportSink& val) {
    export_sink = val;
    __isset.export_sink = true;
  }

  bool operator == (const TDataSink & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (__isset.stream_sink != rhs.__isset.stream_sink)
      return false;
    else if (__isset.stream_sink && !(stream_sink == rhs.stream_sink))
      return false;
    if (__isset.result_sink != rhs.__isset.result_sink)
      return false;
    else if (__isset.result_sink && !(result_sink == rhs.result_sink))
      return false;
    if (__isset.split_sink != rhs.__isset.split_sink)
      return false;
    else if (__isset.split_sink && !(split_sink == rhs.split_sink))
      return false;
    if (__isset.mysql_table_sink != rhs.__isset.mysql_table_sink)
      return false;
    else if (__isset.mysql_table_sink && !(mysql_table_sink == rhs.mysql_table_sink))
      return false;
    if (__isset.export_sink != rhs.__isset.export_sink)
      return false;
    else if (__isset.export_sink && !(export_sink == rhs.export_sink))
      return false;
    return true;
  }
  bool operator != (const TDataSink &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDataSink & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TDataSink &a, TDataSink &b);

} // namespace

#endif
