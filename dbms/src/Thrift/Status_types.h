/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Status_TYPES_H
#define Status_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace palo {

struct TStatusCode {
  enum type {
    OK = 0,
    CANCELLED = 1,
    ANALYSIS_ERROR = 2,
    NOT_IMPLEMENTED_ERROR = 3,
    RUNTIME_ERROR = 4,
    MEM_LIMIT_EXCEEDED = 5,
    INTERNAL_ERROR = 6,
    THRIFT_RPC_ERROR = 7,
    TIMEOUT = 8,
    KUDU_NOT_ENABLED = 9,
    KUDU_NOT_SUPPORTED_ON_OS = 10
  };
};

extern const std::map<int, const char*> _TStatusCode_VALUES_TO_NAMES;

typedef struct _TStatus__isset {
  _TStatus__isset() : error_msgs(false) {}
  bool error_msgs;
} _TStatus__isset;

class TStatus {
 public:

  static const char* ascii_fingerprint; // = "EE4D40E68039374D93838243069CCE4B";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0x4D,0x40,0xE6,0x80,0x39,0x37,0x4D,0x93,0x83,0x82,0x43,0x06,0x9C,0xCE,0x4B};

  TStatus() : status_code((TStatusCode::type)0) {
  }

  virtual ~TStatus() throw() {}

  TStatusCode::type status_code;
  std::vector<std::string>  error_msgs;

  _TStatus__isset __isset;

  void __set_status_code(const TStatusCode::type val) {
    status_code = val;
  }

  void __set_error_msgs(const std::vector<std::string> & val) {
    error_msgs = val;
    __isset.error_msgs = true;
  }

  bool operator == (const TStatus & rhs) const
  {
    if (!(status_code == rhs.status_code))
      return false;
    if (__isset.error_msgs != rhs.__isset.error_msgs)
      return false;
    else if (__isset.error_msgs && !(error_msgs == rhs.error_msgs))
      return false;
    return true;
  }
  bool operator != (const TStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TStatus &a, TStatus &b);

} // namespace

#endif
