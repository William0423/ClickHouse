/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BackendService_TYPES_H
#define BackendService_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Status_types.h"
#include "Types_types.h"
#include "AgentService_types.h"
#include "PaloInternalService_types.h"


namespace palo {

typedef struct _TPullLoadSubTaskInfo__isset {
  _TPullLoadSubTaskInfo__isset() : tracking_url(false) {}
  bool tracking_url;
} _TPullLoadSubTaskInfo__isset;

class TPullLoadSubTaskInfo {
 public:

  static const char* ascii_fingerprint; // = "7CEF611225EEF18F6F7CFC2F1CE31326";
  static const uint8_t binary_fingerprint[16]; // = {0x7C,0xEF,0x61,0x12,0x25,0xEE,0xF1,0x8F,0x6F,0x7C,0xFC,0x2F,0x1C,0xE3,0x13,0x26};

  TPullLoadSubTaskInfo() : sub_task_id(0), tracking_url() {
  }

  virtual ~TPullLoadSubTaskInfo() throw() {}

   ::palo::TUniqueId id;
  int32_t sub_task_id;
  std::map<std::string, int64_t>  file_map;
  std::map<std::string, std::string>  counters;
  std::string tracking_url;

  _TPullLoadSubTaskInfo__isset __isset;

  void __set_id(const  ::palo::TUniqueId& val) {
    id = val;
  }

  void __set_sub_task_id(const int32_t val) {
    sub_task_id = val;
  }

  void __set_file_map(const std::map<std::string, int64_t> & val) {
    file_map = val;
  }

  void __set_counters(const std::map<std::string, std::string> & val) {
    counters = val;
  }

  void __set_tracking_url(const std::string& val) {
    tracking_url = val;
    __isset.tracking_url = true;
  }

  bool operator == (const TPullLoadSubTaskInfo & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(sub_task_id == rhs.sub_task_id))
      return false;
    if (!(file_map == rhs.file_map))
      return false;
    if (!(counters == rhs.counters))
      return false;
    if (__isset.tracking_url != rhs.__isset.tracking_url)
      return false;
    else if (__isset.tracking_url && !(tracking_url == rhs.tracking_url))
      return false;
    return true;
  }
  bool operator != (const TPullLoadSubTaskInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPullLoadSubTaskInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TPullLoadSubTaskInfo &a, TPullLoadSubTaskInfo &b);

typedef struct _TPullLoadTaskInfo__isset {
  _TPullLoadTaskInfo__isset() : file_map(false), counters(false), tracking_urls(false) {}
  bool file_map;
  bool counters;
  bool tracking_urls;
} _TPullLoadTaskInfo__isset;

class TPullLoadTaskInfo {
 public:

  static const char* ascii_fingerprint; // = "49DB2E8B84468C60C7EBEC01CE63203B";
  static const uint8_t binary_fingerprint[16]; // = {0x49,0xDB,0x2E,0x8B,0x84,0x46,0x8C,0x60,0xC7,0xEB,0xEC,0x01,0xCE,0x63,0x20,0x3B};

  TPullLoadTaskInfo() : etl_state(( ::palo::TEtlState::type)0) {
  }

  virtual ~TPullLoadTaskInfo() throw() {}

   ::palo::TUniqueId id;
   ::palo::TEtlState::type etl_state;
  std::map<std::string, int64_t>  file_map;
  std::map<std::string, std::string>  counters;
  std::vector<std::string>  tracking_urls;

  _TPullLoadTaskInfo__isset __isset;

  void __set_id(const  ::palo::TUniqueId& val) {
    id = val;
  }

  void __set_etl_state(const  ::palo::TEtlState::type val) {
    etl_state = val;
  }

  void __set_file_map(const std::map<std::string, int64_t> & val) {
    file_map = val;
    __isset.file_map = true;
  }

  void __set_counters(const std::map<std::string, std::string> & val) {
    counters = val;
    __isset.counters = true;
  }

  void __set_tracking_urls(const std::vector<std::string> & val) {
    tracking_urls = val;
    __isset.tracking_urls = true;
  }

  bool operator == (const TPullLoadTaskInfo & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(etl_state == rhs.etl_state))
      return false;
    if (__isset.file_map != rhs.__isset.file_map)
      return false;
    else if (__isset.file_map && !(file_map == rhs.file_map))
      return false;
    if (__isset.counters != rhs.__isset.counters)
      return false;
    else if (__isset.counters && !(counters == rhs.counters))
      return false;
    if (__isset.tracking_urls != rhs.__isset.tracking_urls)
      return false;
    else if (__isset.tracking_urls && !(tracking_urls == rhs.tracking_urls))
      return false;
    return true;
  }
  bool operator != (const TPullLoadTaskInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPullLoadTaskInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TPullLoadTaskInfo &a, TPullLoadTaskInfo &b);


class TFetchPullLoadTaskInfoResult {
 public:

  static const char* ascii_fingerprint; // = "2450CC2C44C5B702E0921DD166FEF082";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0x50,0xCC,0x2C,0x44,0xC5,0xB7,0x02,0xE0,0x92,0x1D,0xD1,0x66,0xFE,0xF0,0x82};

  TFetchPullLoadTaskInfoResult() {
  }

  virtual ~TFetchPullLoadTaskInfoResult() throw() {}

   ::palo::TStatus status;
  TPullLoadTaskInfo task_info;

  void __set_status(const  ::palo::TStatus& val) {
    status = val;
  }

  void __set_task_info(const TPullLoadTaskInfo& val) {
    task_info = val;
  }

  bool operator == (const TFetchPullLoadTaskInfoResult & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(task_info == rhs.task_info))
      return false;
    return true;
  }
  bool operator != (const TFetchPullLoadTaskInfoResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFetchPullLoadTaskInfoResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TFetchPullLoadTaskInfoResult &a, TFetchPullLoadTaskInfoResult &b);


class TFetchAllPullLoadTaskInfosResult {
 public:

  static const char* ascii_fingerprint; // = "6EA9BC58B69B2763A48C8EB8A5C2881E";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0xA9,0xBC,0x58,0xB6,0x9B,0x27,0x63,0xA4,0x8C,0x8E,0xB8,0xA5,0xC2,0x88,0x1E};

  TFetchAllPullLoadTaskInfosResult() {
  }

  virtual ~TFetchAllPullLoadTaskInfosResult() throw() {}

   ::palo::TStatus status;
  std::vector<TPullLoadTaskInfo>  task_infos;

  void __set_status(const  ::palo::TStatus& val) {
    status = val;
  }

  void __set_task_infos(const std::vector<TPullLoadTaskInfo> & val) {
    task_infos = val;
  }

  bool operator == (const TFetchAllPullLoadTaskInfosResult & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(task_infos == rhs.task_infos))
      return false;
    return true;
  }
  bool operator != (const TFetchAllPullLoadTaskInfosResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFetchAllPullLoadTaskInfosResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TFetchAllPullLoadTaskInfosResult &a, TFetchAllPullLoadTaskInfosResult &b);


class TExportTaskRequest {
 public:

  static const char* ascii_fingerprint; // = "B80B28DEE6170C287BED98B05B24F5D5";
  static const uint8_t binary_fingerprint[16]; // = {0xB8,0x0B,0x28,0xDE,0xE6,0x17,0x0C,0x28,0x7B,0xED,0x98,0xB0,0x5B,0x24,0xF5,0xD5};

  TExportTaskRequest() {
  }

  virtual ~TExportTaskRequest() throw() {}

   ::palo::TExecPlanFragmentParams params;

  void __set_params(const  ::palo::TExecPlanFragmentParams& val) {
    params = val;
  }

  bool operator == (const TExportTaskRequest & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const TExportTaskRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TExportTaskRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TExportTaskRequest &a, TExportTaskRequest &b);

} // namespace

#endif
