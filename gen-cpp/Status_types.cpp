/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Status_types.h"

#include <algorithm>

namespace palo {

int _kTStatusCodeValues[] = {
  TStatusCode::OK,
  TStatusCode::CANCELLED,
  TStatusCode::ANALYSIS_ERROR,
  TStatusCode::NOT_IMPLEMENTED_ERROR,
  TStatusCode::RUNTIME_ERROR,
  TStatusCode::MEM_LIMIT_EXCEEDED,
  TStatusCode::INTERNAL_ERROR,
  TStatusCode::THRIFT_RPC_ERROR,
  TStatusCode::TIMEOUT,
  TStatusCode::KUDU_NOT_ENABLED,
  TStatusCode::KUDU_NOT_SUPPORTED_ON_OS
};
const char* _kTStatusCodeNames[] = {
  "OK",
  "CANCELLED",
  "ANALYSIS_ERROR",
  "NOT_IMPLEMENTED_ERROR",
  "RUNTIME_ERROR",
  "MEM_LIMIT_EXCEEDED",
  "INTERNAL_ERROR",
  "THRIFT_RPC_ERROR",
  "TIMEOUT",
  "KUDU_NOT_ENABLED",
  "KUDU_NOT_SUPPORTED_ON_OS"
};
const std::map<int, const char*> _TStatusCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(11, _kTStatusCodeValues, _kTStatusCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* TStatus::ascii_fingerprint = "EE4D40E68039374D93838243069CCE4B";
const uint8_t TStatus::binary_fingerprint[16] = {0xEE,0x4D,0x40,0xE6,0x80,0x39,0x37,0x4D,0x93,0x83,0x82,0x43,0x06,0x9C,0xCE,0x4B};

uint32_t TStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_status_code = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->status_code = (TStatusCode::type)ecast0;
          isset_status_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->error_msgs.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->error_msgs.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += iprot->readString(this->error_msgs[_i5]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.error_msgs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_status_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TStatus");

  xfer += oprot->writeFieldBegin("status_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->status_code);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.error_msgs) {
    xfer += oprot->writeFieldBegin("error_msgs", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->error_msgs.size()));
      std::vector<std::string> ::const_iterator _iter6;
      for (_iter6 = this->error_msgs.begin(); _iter6 != this->error_msgs.end(); ++_iter6)
      {
        xfer += oprot->writeString((*_iter6));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TStatus &a, TStatus &b) {
  using ::std::swap;
  swap(a.status_code, b.status_code);
  swap(a.error_msgs, b.error_msgs);
  swap(a.__isset, b.__isset);
}

} // namespace
