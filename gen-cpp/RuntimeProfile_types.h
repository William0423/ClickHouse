/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RuntimeProfile_TYPES_H
#define RuntimeProfile_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Metrics_types.h"


namespace palo {


class TCounter {
 public:

  static const char* ascii_fingerprint; // = "8AD8F7908FF0D5FB40F4F4BAEA3D0B0A";
  static const uint8_t binary_fingerprint[16]; // = {0x8A,0xD8,0xF7,0x90,0x8F,0xF0,0xD5,0xFB,0x40,0xF4,0xF4,0xBA,0xEA,0x3D,0x0B,0x0A};

  TCounter() : name(), type(( ::palo::TUnit::type)0), value(0) {
  }

  virtual ~TCounter() throw() {}

  std::string name;
   ::palo::TUnit::type type;
  int64_t value;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_type(const  ::palo::TUnit::type val) {
    type = val;
  }

  void __set_value(const int64_t val) {
    value = val;
  }

  bool operator == (const TCounter & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const TCounter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCounter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TCounter &a, TCounter &b);


class TRuntimeProfileNode {
 public:

  static const char* ascii_fingerprint; // = "1353D8FA3B973253447B1AB74D86C4D3";
  static const uint8_t binary_fingerprint[16]; // = {0x13,0x53,0xD8,0xFA,0x3B,0x97,0x32,0x53,0x44,0x7B,0x1A,0xB7,0x4D,0x86,0xC4,0xD3};

  TRuntimeProfileNode() : name(), num_children(0), metadata(0), indent(0) {
  }

  virtual ~TRuntimeProfileNode() throw() {}

  std::string name;
  int32_t num_children;
  std::vector<TCounter>  counters;
  int64_t metadata;
  bool indent;
  std::map<std::string, std::string>  info_strings;
  std::vector<std::string>  info_strings_display_order;
  std::map<std::string, std::set<std::string> >  child_counters_map;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_num_children(const int32_t val) {
    num_children = val;
  }

  void __set_counters(const std::vector<TCounter> & val) {
    counters = val;
  }

  void __set_metadata(const int64_t val) {
    metadata = val;
  }

  void __set_indent(const bool val) {
    indent = val;
  }

  void __set_info_strings(const std::map<std::string, std::string> & val) {
    info_strings = val;
  }

  void __set_info_strings_display_order(const std::vector<std::string> & val) {
    info_strings_display_order = val;
  }

  void __set_child_counters_map(const std::map<std::string, std::set<std::string> > & val) {
    child_counters_map = val;
  }

  bool operator == (const TRuntimeProfileNode & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(num_children == rhs.num_children))
      return false;
    if (!(counters == rhs.counters))
      return false;
    if (!(metadata == rhs.metadata))
      return false;
    if (!(indent == rhs.indent))
      return false;
    if (!(info_strings == rhs.info_strings))
      return false;
    if (!(info_strings_display_order == rhs.info_strings_display_order))
      return false;
    if (!(child_counters_map == rhs.child_counters_map))
      return false;
    return true;
  }
  bool operator != (const TRuntimeProfileNode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRuntimeProfileNode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TRuntimeProfileNode &a, TRuntimeProfileNode &b);


class TRuntimeProfileTree {
 public:

  static const char* ascii_fingerprint; // = "B488B01E30B1F15A9F97F91F551C3CE7";
  static const uint8_t binary_fingerprint[16]; // = {0xB4,0x88,0xB0,0x1E,0x30,0xB1,0xF1,0x5A,0x9F,0x97,0xF9,0x1F,0x55,0x1C,0x3C,0xE7};

  TRuntimeProfileTree() {
  }

  virtual ~TRuntimeProfileTree() throw() {}

  std::vector<TRuntimeProfileNode>  nodes;

  void __set_nodes(const std::vector<TRuntimeProfileNode> & val) {
    nodes = val;
  }

  bool operator == (const TRuntimeProfileTree & rhs) const
  {
    if (!(nodes == rhs.nodes))
      return false;
    return true;
  }
  bool operator != (const TRuntimeProfileTree &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRuntimeProfileTree & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TRuntimeProfileTree &a, TRuntimeProfileTree &b);

} // namespace

#endif
